#!/usr/bin/env python3
"""
Script to fetch and update Miniconda versions from the official repository.
"""
import json
import re
import requests
from typing import List, Tuple
from packaging import version


def fetch_miniconda_versions() -> List[str]:
    """Fetch Miniconda versions from the official repository."""
    url = "https://repo.anaconda.com/miniconda/"
    
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        html_content = response.text
        
        # Extract all Miniconda3 Linux x86_64 filenames
        pattern = r'Miniconda3-([^"]*)-Linux-x86_64\.sh'
        matches = re.findall(pattern, html_content)
        
        # Remove duplicates and filter out empty matches
        versions = list(set(match for match in matches if match.strip()))
        
        # Sort versions - put "latest" first, then sort others by actual version number
        def sort_key(v: str) -> Tuple[int, version.Version]:
            if v == "latest":
                return (0, version.parse("999.999.999"))  # Put latest first
            
            # Extract base version number for comparison
            base_version = None
            
            # Handle py prefixed versions (e.g., py312_25.5.1-0)
            if v.startswith("py"):
                match = re.match(r'py\d+_(.+)', v)
                if match:
                    base_version = match.group(1)
            else:
                # Handle regular versions (e.g., 4.12.0, 23.11.0-2)
                base_version = v
            
            if base_version:
                try:
                    # Parse version for sorting (replace dash with dot for proper parsing)
                    parsed = version.parse(base_version.replace('-', '.'))
                    return (1, parsed)
                except:
                    # Fallback for unparsable versions
                    return (2, version.parse("0.0.0"))
            
            return (2, version.parse("0.0.0"))
        
        versions.sort(key=sort_key, reverse=True)
        
        return versions
        
    except Exception as e:
        print(f"Error fetching versions: {e}")
        return []


def save_versions_to_json(versions: List[str], output_file: str = "miniconda-versions.json"):
    """Save versions to JSON file."""
    data = {
        "versions": versions,
        "updated": "2025-01-27",
        "source": "https://repo.anaconda.com/miniconda/",
        "note": "Auto-generated by update-miniconda-versions.py"
    }
    
    with open(output_file, 'w') as f:
        json.dump(data, f, indent=2)
    
    print(f"Saved {len(versions)} versions to {output_file}")


def main():
    """Main function."""
    print("Fetching Miniconda versions...")
    versions = fetch_miniconda_versions()
    
    if versions:
        print(f"Found {len(versions)} versions")
        
        # Save to components/directives/templates/miniconda-versions.json
        output_path = "components/directives/templates/miniconda-versions.json"
        save_versions_to_json(versions, output_path)
        
        # Print first few versions for verification
        print("\nFirst 10 versions:")
        for i, v in enumerate(versions[:10]):
            print(f"  {i+1}. {v}")
            
        if len(versions) > 10:
            print(f"  ... and {len(versions) - 10} more")
    else:
        print("No versions found!")


if __name__ == "__main__":
    main()